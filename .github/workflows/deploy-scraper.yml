# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# GitHub recommends pinning actions to a commit SHA.
# To get a newer version, you will need to update the SHA.
# You can also reference a tag or branch, but the action may change without warning.

name: Deploy to Amazon ECS

on:
    push:
        branches:
            - main

env:
    DOCKER_FILE: Dockerfile.scraper # name of dockerfile
    AWS_REGION: us-east-1 # set this to your preferred AWS region, e.g. us-west-1
    ECR_REPOSITORY: spire-api-scraper # set this to your Amazon ECR repository name
    ECS_SERVICE: spire-api # set this to your Amazon ECS service name
    ECS_CLUSTER: spire-api # set this to your Amazon ECS cluster name
    ECS_TASK_DEFINITION:
        .aws/scraper-task-definition.json # set this to the path to your Amazon ECS task definition
        # file, e.g. .aws/task-definition.json
    CONTAINER_NAME:
        spire-api-scraper # set this to the name of the container in the
        # containerDefinitions section of your task definition

jobs:
    deploy:
        name: Deploy
        runs-on: ubuntu-latest
        environment: production

        steps:
            - name: Checkout
              uses: actions/checkout@v4

            - name: Configure AWS credentials
              uses: aws-actions/configure-aws-credentials@0e613a0980cbf65ed5b322eb7a1e075d28913a83
              with:
                  aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
                  aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                  aws-region: ${{ env.AWS_REGION }}

            - name: Login to Amazon ECR
              id: login-ecr
              uses: aws-actions/amazon-ecr-login@62f4f872db3836360b72999f4b87f1ff13310f3a

            - name: Build, tag, and push image to Amazon ECR
              id: build-image
              env:
                  ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
                  IMAGE_TAG: ${{ github.sha }}
              run: |
                  # Build a docker container and
                  # push it to ECR so that it can
                  # be deployed to ECS.
                  docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f $DOCKER_FILE .
                  docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
                  echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

            - name: Fill in the new image ID in the Amazon ECS task definition
              id: task-def
              uses: aws-actions/amazon-ecs-render-task-definition@c804dfbdd57f713b6c079302a4c01db7017a36fc
              with:
                  task-definition: ${{ env.ECS_TASK_DEFINITION }}
                  container-name: ${{ env.CONTAINER_NAME }}
                  image: ${{ steps.build-image.outputs.image }}

            - name: Deploy Amazon ECS task definition
              uses: aws-actions/amazon-ecs-deploy-task-definition@df9643053eda01f169e64a0e60233aacca83799a
              with:
                  task-definition: ${{ steps.task-def.outputs.task-definition }}
                  service: ${{ env.ECS_SERVICE }}
                  cluster: ${{ env.ECS_CLUSTER }}
                  wait-for-service-stability: true
